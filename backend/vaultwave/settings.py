"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.2.20.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import environ
from pathlib import Path
from datetime import timedelta
import os
from celery.schedules import crontab # Import crontab

env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False),
    PAYPAL_MODE=(str, 'sandbox'),
    PAYPAL_CLIENT_ID=(str, 'NOT_SET_IN_ENV_INIT'),
    PAYPAL_CLIENT_SECRET=(str, 'NOT_SET_IN_ENV_INIT'),
    PAYPAL_WEBHOOK_ID=(str, ''),
    FRONTEND_URL=(str, 'http://localhost:5341')
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Take environment variables from .env file
ENV_FILE_PATH = BASE_DIR.parent / '.env'
if os.path.exists(ENV_FILE_PATH):
    print(f"DEBUG: Reading .env file from: {ENV_FILE_PATH}")
    environ.Env.read_env(str(ENV_FILE_PATH))
else:
    print(f"DEBUG: .env file NOT FOUND at: {ENV_FILE_PATH}. Using system environment variables or defaults.")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

ALLOWED_HOSTS = env('ALLOWED_HOSTS').split(' ')

# Paypal settings

PAYPAL_MODE = env('PAYPAL_MODE')
PAYPAL_CLIENT_ID = env('PAYPAL_CLIENT_ID')
PAYPAL_CLIENT_SECRET = env('PAYPAL_CLIENT_SECRET')
PAYPAL_WEBHOOK_ID = env('PAYPAL_WEBHOOK_ID')
FRONTEND_URL = env('FRONTEND_URL')

print(f"DEBUG SETTINGS: PAYPAL_CLIENT_ID: {PAYPAL_CLIENT_ID}")
print(f"DEBUG SETTINGS: PAYPAL_CLIENT_SECRET: {'*' * len(PAYPAL_CLIENT_SECRET) if PAYPAL_CLIENT_SECRET not in ['NOT_SET_IN_ENV_INIT', ''] else PAYPAL_CLIENT_SECRET}")
print(f"DEBUG SETTINGS: PAYPAL_MODE: {PAYPAL_MODE}")

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_filters',
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'django_celery_beat',
    'users',
    'music',
    'playlists',
    'shop',
    'chat',
    'library',
    'cart',
    'interactions', # New app
    'notifications', # New app
    'vaultwave'
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware', # This is correct for MIDDLEWARE
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:5341", # Frontend's default port from docker-compose
    "http://127.0.0.1:5341",
]
# If you use credentials (like cookies or Authorization headers), set this:
# CORS_ALLOW_CREDENTIALS = True

ROOT_URLCONF = 'vaultwave.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages', # <--- CORRECTED PATH
            ],
        },
    },
]

WSGI_APPLICATION = 'vaultwave.wsgi.application'

# ASGI application for Channels if you integrate WebSockets later
# ASGI_APPLICATION = 'vaultwave.asgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': env.db(),
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },

    # --- Custom validators ---
    {
        'NAME': 'users.validators.UppercaseValidator',
    },
    {
        'NAME': 'users.validators.NumberValidator',
    },
    {
        'NAME': 'users.validators.SymbolValidator',
    },
]

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
            'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
            'rest_framework_simplejwt.authentication.JWTAuthentication',
            'rest_framework.authentication.SessionAuthentication', # Optional: for browsable API
    ],
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10 # Example page size
}

SIMPLE_JWT = {
    # How long an access token is valid for
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60), # Example: 1 hour
    # How long a refresh token is valid for
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),    # Example: 1 week
    'ROTATE_REFRESH_TOKENS': True, # Corrected from ROTATE_REFRESH_TOKES
    'BLACKLIST_AFTER_ROTATION': True, # Add old refresh token to blacklist
    'UPDATE_LAST_LOGIN': True, # Update user's last_login field on token refresh

    'ALGORITHM': 'HS256', # Standard algorithm
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5), # Not typically used with access/refresh pair
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1), # Not typically used
}

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles_collected') # For collectstatic in production

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'mediafiles') # Store uploads inside the backend/mediafiles dir

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Celery Configuration Options
CELERY_BROKER_URL = env('CELERY_BROKER_URL')
CELERY_RESULT_BACKEND = env('CELERY_RESULT_BACKEND')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC' # Recommended to use UTC

CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Celery Beat Schedule
CELERY_BEAT_SCHEDULE = {
    'cleanup-generated-downloads-daily': {
        'task': 'music.tasks.cleanup_generated_downloads_task', # Corrected task name
        'schedule': crontab(hour=3, minute=0),  # Run daily at 3:00 AM UTC
        # 'schedule': crontab(minute='*/5'), # For testing: run every 5 minutes
    },
    # Add other scheduled tasks here
}


FORBIDDEN_USERNAME_SUBSTRINGS = [
    'admin',
    'root',
    'staff',
    'support',
    'help',
    'moderator',
    'superuser',
    'vaultwave',
    'system',
    'info',
]

# A list of supported currencies
CURRENCY_CHOICES = [
    ('USD', 'US Dollar'),
    ('EUR', 'Euro'),
    ('GBP', 'British Pound'),
]

DEFAULT_CURRENCY = 'USD'

# Logging Configuration (Example)
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'console': {
#             'class': 'logging.StreamHandler',
#         },
#     },
#     'root': {
#         'handlers': ['console'],
#         'level': 'INFO', # Change to DEBUG for more verbosity
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['console'],
#             'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
#             'propagate': False,
#         },
#     },
# }